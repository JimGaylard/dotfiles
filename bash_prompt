#!/bin/bash
#
# DESCRIPTION:
#
#   Set the bash prompt according to:
#    * the ruby version
#    * the branch/status of the current git repository
#    * the branch of the current subversion repository
#    * the return value of the previous command
#
        RED="\[\033[0;31m\]"
     YELLOW="\[\033[0;33m\]"
      GREEN="\[\033[0;32m\]"
       BLUE="\[\033[0;34m\]"
       CYAN="\[\033[1;36m\]"
    MY_BLUE="\[\033[1;34m\]"
  LIGHT_RED="\[\033[1;31m\]"
  DARK_GRAY="\[\033[1;32m\]"
      WHITE="\[\033[1;37m\]"
 LIGHT_GRAY="\[\033[0;36m\]"
     MY_RED="\[\033[0;31m\]"
 COLOR_NONE="\[\e[0m\]"

# Detect whether the current directory is a git repository.
function is_git_repository {
  git branch > /dev/null 2>&1
}

# Detect whether the current directory is a subversion repository.
function is_svn_repository {
  test -d .svn
}

# Determine the branch/state information for this git repository.
function set_git_branch {
  # Capture the output of the "git status" command.
  git_status="$(git status 2> /dev/null)"

  # Set color based on clean/staged/dirty.
  if [[ ${git_status} =~ "working directory clean" ]]; then
    state="${GREEN}"
  elif [[ ${git_status} =~ "Changes to be committed" ]]; then
    state="${YELLOW}"
  else
    state="${LIGHT_RED}"
  fi

  # Set arrow icon based on status against remote.
  remote_pattern="# Your branch is (.*) of"
  if [[ ${git_status} =~ ${remote_pattern} ]]; then
    if [[ ${BASH_REMATCH[1]} == "ahead" ]]; then
      remote="↑"
    else
      remote="↓"
    fi
  else
    remote=""
  fi
  diverge_pattern="# Your branch and (.*) have diverged"
  if [[ ${git_status} =~ ${diverge_pattern} ]]; then
    remote="↕"
  fi

  # Get the name of the branch.
  branch=`git rev-parse --abbrev-ref HEAD`

  # Set the final branch string.
  BRANCH=" ${state}(${branch})${remote}${COLOR_NONE}"
}

# Determine the state information for this svn repository,
# support for svn status without hit the remote repository.
function set_svn_state {
    modified=$(svn status 2> /dev/null | grep  ^[MAD] | wc -l)
    if [ $modified -eq 0 ]; then
        STATE_SVN="${GREEN}"
    else
        STATE_SVN="${YELLOW}"
    fi
}

# Determine the branch information for this subversion repository.
function set_svn_branch {
  # Capture the output of the "git status" command.
  svn_info="$(svn info | egrep '^URL: ' 2> /dev/null)"

  # Get the name of the branch.
  branch_pattern="^URL: .*/(branches|tags)/([^/]+)"
  trunk_pattern="^URL: .*/trunk(/.*)?$"
  if [[ ${svn_info} =~ $branch_pattern ]]; then
    branch=${BASH_REMATCH[2]}
  elif [[ ${svn_info} =~ $trunk_pattern ]]; then
    branch='trunk'
  fi

  set_svn_state
  # Set the final branch string.
  #BRANCH="(${branch}) "
  BRANCH=" ${STATE_SVN}(${branch})${COLOR_NONE}"
}

# Return the prompt symbol to use, colorized based on the return value of the
# previous command.
function set_prompt_symbol () {
  if test $1 -eq 0 ; then
      if [ "$AWS_ENVIRONMENT" == "" ]; then
        PROMPT_SYMBOL=${GREEN}"^_^"${COLOR_NONE}
      else
        PROMPT_SYMBOL="${CYAN}^_^${COLOR_NONE}"
      fi
  else
    PROMPT_SYMBOL="${RED}0_o${COLOR_NONE}"
  fi
}


function parse_ruby_version {
  ruby -v | cut -d" " -f1,2
}

# Set the full bash prompt.
function set_bash_prompt () {
  # Set the PROMPT_SYMBOL variable. We do this first so we don't lose the
  # return value of the last command.
  set_prompt_symbol $?

  # Set the BRANCH variable.
  if is_git_repository ; then
    set_git_branch
  elif is_svn_repository ; then
    set_svn_branch
  else
    BRANCH=''
  fi

  #GIT_PS1_SHOWDIRTYSTATE=1
  #if [ __git_ps1 eq "[master]" ]
  #  BRANCH=$(__git_ps1 ' ${GREEN}[%s]${COLOR_NONE}')
  #elif [ __git_ps1 eq "[master *]" ]
  #  BRANCH=$(__git_ps1 ' ${YELLOW}[%s]${COLOR_NONE}')
  #else
  #  BRANCH=$(__git_ps1 ' ${YELLOW}[%s]${COLOR_NONE}')
  #fi

  if [ "$AWS_ENVIRONMENT" != "" ]; then
    AWS_ENV=" ${CYAN}(AWS:${AWS_ENVIRONMENT})${COLOR_NONE}"
  else
    AWS_ENV=''
  fi

  # Set the bash prompt variable.
  #PS1="${LIGHT_GRAY}\w${COLOR_NONE} ${YELLOW}($(parse_ruby_version))${COLOR_NONE}${AWS_ENV} ${PROMPT_SYMBOL} "
  read -r -d '' PROMPT_STRING <<-_EOF_
${DARK_GRAY}this is a blank line${COLOR_NONE}\n\
${BLUE}\u@\h${COLOR_NONE} \
${YELLOW}($(parse_ruby_version))${COLOR_NONE}\
${BRANCH} \
${LIGHT_GRAY}\w${COLOR_NONE}\n\
${PROMPT_SYMBOL}
_EOF_

  PS1="${PROMPT_STRING} "
}

# Tell bash to execute this function just before displaying its prompt.
PROMPT_COMMAND=set_bash_prompt
